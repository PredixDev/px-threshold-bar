{"version":3,"sources":["ev-threshold-bar.es6.js"],"names":["Polymer","is","properties","min","type","Number","value","max","reversed","Boolean","config","Array","uom","String","_scaleFactor","observers","ready","_refreshStyle","_getStyles","width","order","length","color","_scaleDataChanged","thresholdEl","dom","root","querySelector","_checkValuesSet","clientWidth","factor","set","setTimeout","bind","_configDataChanged","configLen","sort","a","b","i","_getMarkerLineStyle","position","_getMarkerStyle","_getValueStyle","spanEl","spanSize","style","display","includeValue","undefined"],"mappings":"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","file":"ev-threshold-bar.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'ev-threshold-bar',\n\n    properties: {\n\n      /**\n       * Holds the min value for the threshold bar.\n       *\n       * @property\n       */\n      min: {\n        type: Number,\n        value: 0\n      },\n\n      /**\n       * Holds the max value for the threshold bar.\n       *\n       * @property\n       */\n      max: {\n        type: Number,\n        value: 100\n      },\n\n      /**\n       * Reverse the bar orientation.\n       *\n       * @property\n       */\n      reversed: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Holds the thresholds configuration.\n       * The configuration should be an array of Objects with the following structure:\n       * {\n       *   min: <A number representing the begining of the threshold>,\n       *   max: <A number representing the end of the threshold>,\n       *   color: <A valid color for this specific bar (Hex / RGB)>\n       * }\n       */\n      config: {\n        type: Array,\n        value: function() {\n          return [];\n        }\n      },\n\n      /**\n       * The current value to be displayed on top of the threshold bar.\n       * If this property is null a value won't be show but the threshold bar will still be displayed.\n       *\n       * @property\n       */\n      value: {\n        type: Number,\n        value: null\n      },\n\n      /**\n       * The unit of measure for the value, if any.\n       *\n       * @property\n       */\n      uom: {\n        type: String,\n        value: ''\n      },\n\n      /**\n       * Holds the (pixel / range) scale factor used to calculate the threshold bars and value positioning.\n       *\n       * @property\n       * @private\n       */\n      _scaleFactor: {\n        type: Number,\n        value: null\n      }\n    },\n\n    observers: [\n      '_configDataChanged(config)',\n      '_scaleDataChanged(min)',\n      '_scaleDataChanged(max)'\n    ],\n\n    ready: function() {\n      this._refreshStyle = false;\n    },\n\n    /**\n     * Calculates the width of the specific threshold bars.\n     *\n     * @param config - The threshold configuration Object\n     * @return {string} - The style string\n     * @private\n     */\n    _getStyles: function (config) {\n      let width = ((config.max - config.min) * this._scaleFactor),\n          order = this.reversed ? this.config.length - config.order : config.order;\n\n      return 'width: ' + width + 'px; ' + 'background-color: ' + config.color + '; ' + 'order: ' + order + ';';\n    },\n\n    /**\n     * Observer that calculates the scale factor when the extremes of the threshold bar are changed.\n     *\n     * @private\n     */\n    _scaleDataChanged: function () {\n      let thresholdEl = Polymer.dom(this.root).querySelector('.threshold-bar-container');\n\n      if (this._checkValuesSet(false)) {\n        if (thresholdEl && thresholdEl.clientWidth) {\n          let factor = (thresholdEl.clientWidth / (this.max - this.min));\n\n          this.set('_scaleFactor', factor);\n        }\n        else {\n          setTimeout(function() {\n            this._scaleDataChanged();\n          }.bind(this), 100)\n        }\n      }\n    },\n\n    /**\n     * Observer that orders the threshold configuration based on the min property.\n     *\n     * @param config - The list of threshold configurations\n     * @private\n     */\n    _configDataChanged(config) {\n      if (config && config.length) {\n        let configLen = config.length;\n\n        config.sort(function (a, b) {\n          return a.min - b.min;\n        });\n\n        for (let i = 0; i < configLen; i++) {\n          config[i]['order'] = i;\n        }\n      }\n    },\n\n    /**\n     * Calculates the position of the Marker Line in the threshold bar\n     *\n     * @return {string} - The style string\n     * @private\n     */\n    _getMarkerLineStyle: function () {\n      if (this._checkValuesSet(true) && this._scaleFactor) {\n        let position = Number(this.value);\n\n        position = position > this.max ? this.max : position;\n        position = position < this.min ? this.min : position;\n        position = position * this._scaleFactor;\n\n        return 'left: ' + position + 'px;';\n      }\n\n      return '';\n    },\n\n    /**\n     * Calculates the position of the Marker Icon in the threshold bar\n     *\n     * @return {string} - The style string\n     * @private\n     */\n    _getMarkerStyle: function () {\n      if (this._checkValuesSet(true) && this._scaleFactor) {\n        let position = Number(this.value);\n\n        position = position > this.max ? this.max : position;\n        position = position < this.min ? this.min : position;\n        position = (position * this._scaleFactor) - 4;\n\n        return 'left: ' + position + 'px;';\n      }\n\n      return 'display: none;';\n    },\n\n    /**\n     * Calculates the position of the value label in the threshold bar\n     *\n     * @return {string} - The style string\n     * @private\n     */\n    _getValueStyle: function () {\n      let spanEl = Polymer.dom(this.root).querySelector('.threshold-bar-value > span'),\n          spanSize;\n\n      spanEl.style.display = 'block';\n      spanSize = spanEl.clientWidth;\n\n      if (spanSize) {\n        if (this._checkValuesSet(true) && this._scaleFactor) {\n          let position = Number(this.value);\n\n          position = position > this.max ? this.max : position;\n          position = position < this.min ? this.min : position;\n          position = (position * this._scaleFactor) - spanSize + 4;\n          position = position < 0 ? ((Number(this.value) * this._scaleFactor) - 4) : position;\n\n          return 'left: ' + position + 'px;';\n        }\n      }\n      else {\n        setTimeout(function () {\n          this._refreshStyle = !this._refreshStyle;\n        }.bind(this), 100);\n      }\n\n      return 'display: none;';\n    },\n\n    /**\n     * Verifies that values were set for the base properties min, max and value.\n     *\n     * @param includeValue - Includes the property value in the check\n     * @return {boolean} - Whether the values were set or not\n     * @private\n     */\n    _checkValuesSet: function(includeValue) {\n      let min = this.min !== null && this.min !== undefined,\n          max = this.max !== null && this.max !== undefined,\n          value = this.value !== null && this.value !== undefined;\n\n      return includeValue ? min && max && value : min && max;\n    }\n  });\n})();\n"]}