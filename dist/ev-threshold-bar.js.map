{"version":3,"sources":["ev-threshold-bar.es6.js"],"names":["Polymer","is","properties","min","type","Number","value","max","hideValue","Boolean","hideScale","config","Array","uom","String","_scaleFactor","observers","ready","_refreshStyle","_getStyles","width","color","_scaleDataChanged","thresholdEl","dom","root","querySelector","_checkValuesSet","clientWidth","factor","set","setTimeout","bind","_configDataChanged","length","configLen","sort","a","b","i","_getMarkerLineStyle","position","padding","document","window","getComputedStyle","substr","_getMarkerStyle","_getValueStyle","spanEl","style","display","spanSize","includeValue","undefined","_hideScale"],"mappings":"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","file":"ev-threshold-bar.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'ev-threshold-bar',\n\n    properties: {\n\n      /**\n       * Holds the min value for the threshold bar.\n       *\n       * @property\n       */\n      min: {\n        type: Number,\n        value: 0\n      },\n\n      /**\n       * Holds the max value for the threshold bar.\n       *\n       * @property\n       */\n      max: {\n        type: Number,\n        value: 100\n      },\n\n      /**\n       * Prevents the value to be displayed on top of the bar\n       *\n       */\n      hideValue: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Prevents the scale to be displayed below the bar\n       *\n       */\n      hideScale: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Holds the thresholds configuration.\n       * The configuration should be an array of Objects with the following structure:\n       * {\n       *   min: <A number representing the begining of the threshold>,\n       *   max: <A number representing the end of the threshold>,\n       *   color: <A valid color for this specific bar (Hex / RGB)>\n       * }\n       */\n      config: {\n        type: Array,\n        value: function() {\n          return [];\n        }\n      },\n\n      /**\n       * The current value to be displayed on top of the threshold bar.\n       * If this property is null a value won't be show but the threshold bar will still be displayed.\n       *\n       * @property\n       */\n      value: {\n        type: Number,\n        value: null\n      },\n\n      /**\n       * The unit of measure for the value, if any.\n       *\n       * @property\n       */\n      uom: {\n        type: String,\n        value: ''\n      },\n\n      /**\n       * Holds the (pixel / range) scale factor used to calculate the threshold bars and value positioning.\n       *\n       * @property\n       * @private\n       */\n      _scaleFactor: {\n        type: Number,\n        value: null\n      }\n    },\n\n    observers: [\n      '_configDataChanged(config)',\n      '_scaleDataChanged(min)',\n      '_scaleDataChanged(max)'\n    ],\n\n    ready: function() {\n      this._refreshStyle = false;\n    },\n\n    /**\n     * Calculates the width of the specific threshold bars.\n     *\n     * @param config - The threshold configuration Object\n     * @return {string} - The style string\n     * @private\n     */\n    _getStyles: function (config) {\n      let width = ((config.max - config.min) * this._scaleFactor);\n\n      return 'width: ' + width + 'px; ' + 'background-color: ' + config.color + ';';\n    },\n\n    /**\n     * Observer that calculates the scale factor when the extremes of the threshold bar are changed.\n     *\n     * @private\n     */\n    _scaleDataChanged: function () {\n      let thresholdEl = Polymer.dom(this.root).querySelector('.threshold-bar-container');\n\n      if (this._checkValuesSet(false)) {\n        if (thresholdEl && thresholdEl.clientWidth) {\n          let factor = (thresholdEl.clientWidth / (this.max - this.min));\n\n          this.set('_scaleFactor', factor);\n        }\n        else {\n          setTimeout(function() {\n            this._scaleDataChanged();\n          }.bind(this), 100)\n        }\n      }\n    },\n\n    /**\n     * Observer that orders the threshold configuration based on the min property.\n     *\n     * @param config - The list of threshold configurations\n     * @private\n     */\n    _configDataChanged(config) {\n      if (config && config.length) {\n        let configLen = config.length;\n\n        config.sort(function (a, b) {\n          return a.min - b.min;\n        });\n\n        for (let i = 0; i < configLen; i++) {\n          config[i]['order'] = i;\n        }\n      }\n    },\n\n    /**\n     * Calculates the position of the Marker Line in the threshold bar\n     *\n     * @return {string} - The style string\n     * @private\n     */\n    _getMarkerLineStyle: function () {\n      if (this._checkValuesSet(true) && this._scaleFactor) {\n        let position = Number(this.value),\n            padding = 0;\n\n        if (document.querySelector('.scale-first-value')) {\n          padding = window.getComputedStyle(document.querySelector('.scale-first-value'), false)['width'];\n          padding = Number(padding.substr(0, padding.length - 2));\n        }\n\n        position = position > this.max ? this.max : position;\n        position = position < this.min ? this.min : position;\n        position = position * this._scaleFactor;\n        position = this.hideScale ? position : position + padding;\n\n        return 'left: ' + position + 'px;';\n      }\n\n      return '';\n    },\n\n    /**\n     * Calculates the position of the Marker Icon in the threshold bar\n     *\n     * @return {string} - The style string\n     * @private\n     */\n    _getMarkerStyle: function () {\n      if (this._checkValuesSet(true) && this._scaleFactor) {\n        let position = Number(this.value),\n            padding = 0;\n\n        if (document.querySelector('.scale-first-value')) {\n          padding = window.getComputedStyle(document.querySelector('.scale-first-value'), false)['width'];\n          padding = Number(padding.substr(0, padding.length - 2));\n        }\n\n        position = position > this.max ? this.max : position;\n        position = position < this.min ? this.min : position;\n        position = (position * this._scaleFactor) - 4;\n        position = this.hideScale ? position : position + padding;\n\n        return 'left: ' + position + 'px;';\n      }\n\n      return 'display: none;';\n    },\n\n    /**\n     * Calculates the position of the value label in the threshold bar\n     *\n     * @return {string} - The style string\n     * @private\n     */\n    _getValueStyle: function () {\n      let spanEl = Polymer.dom(this.root).querySelector('.threshold-bar-value > span');\n\n      spanEl.style.display = this.hideValue ? 'none' : 'block';\n\n        if (this._checkValuesSet(true) && this._scaleFactor) {\n          let spanSize = spanEl.clientWidth;\n\n          if (spanSize) {\n            let position = Number(this.value),\n                padding = 0;\n\n            if (document.querySelector('.scale-first-value')) {\n              padding = window.getComputedStyle(document.querySelector('.scale-first-value'), false)['width'];\n              padding = Number(padding.substr(0, padding.length - 2));\n            }\n\n            position = position > this.max ? this.max : position;\n            position = position < this.min ? this.min : position;\n            position = (position * this._scaleFactor) - spanSize + 4;\n            position = position < 0 ? ((Number(this.value) * this._scaleFactor) - 4) : position;\n            position = this.hideScale ? position : position + padding;\n\n            return 'left: ' + position + 'px;';\n          }\n          else {\n            setTimeout(function () {\n              this._refreshStyle = !this._refreshStyle;\n            }.bind(this), 100);\n          }\n        }\n\n      return 'display: none;';\n    },\n\n    /**\n     * Verifies that values were set for the base properties min, max and value.\n     *\n     * @param includeValue - Includes the property value in the check\n     * @return {boolean} - Whether the values were set or not\n     * @private\n     */\n    _checkValuesSet: function(includeValue) {\n      let min = this.min !== null && this.min !== undefined,\n          max = this.max !== null && this.max !== undefined,\n          value = this.value !== null && this.value !== undefined;\n\n      return includeValue ? min && max && value : min && max;\n    },\n\n    _hideScale: function() {\n      return this.hideScale ? 'hide-scale' : '';\n    }\n  });\n})();\n"]}